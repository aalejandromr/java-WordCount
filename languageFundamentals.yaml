Java Loops:
  Continue:
    if we want to skip everything in the loop and continue to iterate
  Break:
    instead of skip, it stops everything
  Recursion:
    something that is defined in terms by itself (Calling its self)
    it is very expansive
    Factorial - Normal Case

Java Conditionals (Branching because well you can create branches)

Ternary Operator
  condition ? "If yes" : "if false".

Arrays:
  They are fixed length (We have to tell it upfront how many items they will have)
  They are fixed data type
  Syntax:
    Type name = [] or {}
    when printing the array
      if we do Sytem.out.println(array) it is going to print the pointer not the elements
        if we need to print the elements we have to go over one by one
# FROM HERE WE NEED TO IMPROT FROM java.util.
ArraysList:
  They can grow
  the order is mantain
  Syntax:
    ArrayList<Type> name = new ArrayList<Type>();
  To Add:
    arrayList.add()
  To Get:
    arrayList.get(index)
  To get Size:
    arrayList.size();
  To Clear:
    arrayList.clear();

HashMap:
  They are key pair
  Can have varied length
  fixed data type
  Order is not maintained
  Syntax:
    HasMap<KeyType, ValueType> name = new HashMap<KeyType, ValueType>();
  To Add:
    hashMap.put(key, value)
  To Get:
    hashMap.get(key);
  To remove:
    hashMap.remove(key);

HashSet:
  They are a collection
  Varied length
  fixed data type
  Duplicate values are NOT allowed
  value based
  Syntax:
    HashSet<Type> name = new HashSet<Type>();
  To Add:
    hashSet.add("Single value") if you add duplicated items it is going to ignore
  To Remove:
    hashSet.remove
  check if is there:
    hashSet.contains and returns true or false